<?php
/**
 * TransactionsApiTest
 * PHP version 8.1
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 */

/**
 * Accounting API
 *
 * The version of the OpenAPI document: 7.5.10
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */

namespace Accounting\Test\Api;

use Accounting\ApiException;
use PHPUnit\Framework\TestCase;
use Accounting\Accounting;
use GuzzleHttp\HandlerStack;
use Accounting\Test\TestHandler;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\Attributes\UsesClass;
use Accounting\Api\TransactionsApi;

/**
 * TransactionsApiTest Class Doc Comment
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 *
 * @covers TransactionsApi
 * @uses Accounting
 */
class TransactionsApiTest extends TestCase
{
    /**
     * Test case for addTransaction
     *
     * Add a transaction.
     *
     */
    public function testAddTransaction()
    {
        $path = "/transactions";

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("POST", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->transactions()->addTransaction(["test" => true], ));
    }

    /**
     * Test case for addTransactionCode
     *
     * Add a transaction's code.
     *
     */
    public function testAddTransactionCode()
    {
        $path = "/transactions/{uuid}/codes";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("POST", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->transactions()->addTransactionCode('uuid_example', ["test" => true], ));
    }

    /**
     * Test case for deleteTransaction
     *
     * Delete a transaction.
     *
     */
    public function testDeleteTransaction()
    {
        $path = "/transactions/{uuid}";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("DELETE", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->transactions()->deleteTransaction('uuid_example', ));
    }

    /**
     * Test case for deleteTransactionCode
     *
     * Delete a transaction's code.
     *
     */
    public function testDeleteTransactionCode()
    {
        $path = "/transactions/{uuid}/codes/{code}";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);
        $path = str_replace('{' . 'code' . '}', 'code_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("DELETE", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->transactions()->deleteTransactionCode('uuid_example', 'code_example', ));
    }

    /**
     * Test case for getTransaction
     *
     * Get a transaction.
     *
     */
    public function testGetTransaction()
    {
        $path = "/transactions/{uuid}";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("GET", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->transactions()->getTransaction('uuid_example', ));
    }

    /**
     * Test case for importTransactions
     *
     * Import transactions - INTERNAL.
     *
     */
    public function testImportTransactions()
    {
        $path = "/transactions/import";

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("POST", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->transactions()->importTransactions(["test" => true], ));
    }

    /**
     * Test case for listTransactionCodes
     *
     * List transaction's codes.
     *
     */
    public function testListTransactionCodes()
    {
        $path = "/transactions/{uuid}/codes";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("GET", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->transactions()->listTransactionCodes('uuid_example', 'fields_example', 'page_example', 'perPage_example', 'account_example', ));
    }

    /**
     * Test case for listTransactions
     *
     * List company's transactions.
     *
     */
    public function testListTransactions()
    {
        $path = "/transactions";

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("GET", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->transactions()->listTransactions('fields_example', 'page_example', 'perPage_example', 'account_example', ));
    }

    /**
     * Test case for updateTransaction
     *
     * Update a transaction.
     *
     */
    public function testUpdateTransaction()
    {
        $path = "/transactions/{uuid}";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("PUT", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->transactions()->updateTransaction('uuid_example', ["test" => true], ));
    }

    /**
     * Test case for updateTransactionCode
     *
     * Update a transaction's code.
     *
     */
    public function testUpdateTransactionCode()
    {
        $path = "/transactions/{uuid}/codes";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("PUT", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->transactions()->updateTransactionCode('uuid_example', ["test" => true], ));
    }
}
