<?php
/**
 * TransfersApiTest
 * PHP version 8.1
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 */

/**
 * Accounting API
 *
 * The version of the OpenAPI document: 7.3.11
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */

namespace Accounting\Test\Api;

use Accounting\ApiException;
use PHPUnit\Framework\TestCase;
use Accounting\Accounting;
use GuzzleHttp\HandlerStack;
use Accounting\Test\TestHandler;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\Attributes\UsesClass;
use Accounting\Api\TransfersApi;

/**
 * TransfersApiTest Class Doc Comment
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 *
 * @covers TransfersApi
 * @uses Accounting
 */
class TransfersApiTest extends TestCase
{
    /**
     * Test case for addTransfer
     *
     * Add a transfer.
     *
     */
    public function testAddTransfer()
    {
        $path = "/transfers";

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("POST", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->transfers()->addTransfer(["test" => true], ));
    }

    /**
     * Test case for deleteTransfer
     *
     * Delete a transfer.
     *
     */
    public function testDeleteTransfer()
    {
        $path = "/transfers/{uuid}";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("DELETE", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->transfers()->deleteTransfer('uuid_example', ));
    }

    /**
     * Test case for getTransfer
     *
     * Get a transfer.
     *
     */
    public function testGetTransfer()
    {
        $path = "/transfers/{uuid}";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("GET", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->transfers()->getTransfer('uuid_example', ));
    }

    /**
     * Test case for listTransfers
     *
     * List company's transfers.
     *
     */
    public function testListTransfers()
    {
        $path = "/transfers";

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("GET", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->transfers()->listTransfers('fields_example', 'page_example', 'perPage_example', ));
    }

    /**
     * Test case for updateTransfer
     *
     * Update a transfer.
     *
     */
    public function testUpdateTransfer()
    {
        $path = "/transfers/{uuid}";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("PUT", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->transfers()->updateTransfer('uuid_example', ["test" => true], ));
    }
}
