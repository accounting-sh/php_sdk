<?php

/**
 * BillsApiTest
 * PHP version 8.1
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 */

/**
 * Accounting API
 *
 * The version of the OpenAPI document: 8.3.12
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */

namespace Accounting\Test\Api;

use Accounting\ApiException;
use PHPUnit\Framework\TestCase;
use Accounting\Accounting;
use GuzzleHttp\HandlerStack;
use Accounting\Test\TestHandler;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\Attributes\UsesClass;
use Accounting\Api\BillsApi;

/**
 * BillsApiTest Class Doc Comment
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 *
 * @covers BillsApi
 * @uses Accounting
 */
class BillsApiTest extends TestCase
{
    /**
     * Test case for addBill
     *
     * Add a bill.
     *
     */
    public function testAddBill()
    {
        $path = "/expenses/bills";

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("POST", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->bills()->addBill(["test" => true], ));
    }

    /**
     * Test case for addBillPayment
     *
     * Add a bill payment.
     *
     */
    public function testAddBillPayment()
    {
        $path = "/expenses/bills/{uuid}/payments";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("POST", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->bills()->addBillPayment('uuid_example', ["test" => true], ));
    }

    /**
     * Test case for deleteBill
     *
     * Delete a bill.
     *
     */
    public function testDeleteBill()
    {
        $path = "/expenses/bills/{uuid}";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("DELETE", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->bills()->deleteBill('uuid_example', ));
    }

    /**
     * Test case for getBill
     *
     * Get a bill.
     *
     */
    public function testGetBill()
    {
        $path = "/expenses/bills/{uuid}";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("GET", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->bills()->getBill('uuid_example', ));
    }

    /**
     * Test case for getBillDocument
     *
     * Get a bill in PDF.
     *
     */
    public function testGetBillDocument()
    {
        $path = "/expenses/bills/{uuid}/document";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("GET", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->bills()->getBillDocument('uuid_example', ));
    }

    /**
     * Test case for listBills
     *
     * List company's bills.
     *
     */
    public function testListBills()
    {
        $path = "/expenses/bills";

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("GET", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->bills()->listBills('fields_example', 'page_example', 'perPage_example', ));
    }

    /**
     * Test case for updateBill
     *
     * Update a bill.
     *
     */
    public function testUpdateBill()
    {
        $path = "/expenses/bills/{uuid}";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("PUT", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->bills()->updateBill('uuid_example', ["test" => true], ));
    }

    /**
     * Test case for updateBillPayment
     *
     * Update a bill payment.
     *
     */
    public function testUpdateBillPayment()
    {
        $path = "/expenses/bills/{uuid}/payments/{payment}";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);
        $path = str_replace('{' . 'payment' . '}', 'payment_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("PUT", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->bills()->updateBillPayment('uuid_example', 'payment_example', ["test" => true], ));
    }
}
