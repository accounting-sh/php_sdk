<?php

/**
 * DocumentsApiTest
 * PHP version 8.1
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 */

/**
 * Accounting API
 *
 * The version of the OpenAPI document: 8.3.12
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */

namespace Accounting\Test\Api;

use Accounting\ApiException;
use PHPUnit\Framework\TestCase;
use Accounting\Accounting;
use GuzzleHttp\HandlerStack;
use Accounting\Test\TestHandler;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\Attributes\UsesClass;
use Accounting\Api\DocumentsApi;

/**
 * DocumentsApiTest Class Doc Comment
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 *
 * @covers DocumentsApi
 * @uses Accounting
 */
class DocumentsApiTest extends TestCase
{
    /**
     * Test case for cancelReview
     *
     * Cancel document review.
     *
     */
    public function testCancelReview()
    {
        $path = "/documents/{uuid}/review";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("DELETE", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->documents()->cancelReview('uuid_example', ));
    }

    /**
     * Test case for deleteDocument
     *
     * Delete a document.
     *
     */
    public function testDeleteDocument()
    {
        $path = "/documents/{uuid}";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("DELETE", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->documents()->deleteDocument('uuid_example', ));
    }

    /**
     * Test case for getDocument
     *
     * Get a document.
     *
     */
    public function testGetDocument()
    {
        $path = "/documents/{uuid}";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("GET", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->documents()->getDocument('uuid_example', ));
    }

    /**
     * Test case for listDocuments
     *
     * List company's documents.
     *
     */
    public function testListDocuments()
    {
        $path = "/documents";

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("GET", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->documents()->listDocuments('fields_example', 'page_example', 'perPage_example', ));
    }

    /**
     * Test case for processDocument
     *
     * Process a document.
     *
     */
    public function testProcessDocument()
    {
        $path = "/documents/{uuid}/process";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("GET", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->documents()->processDocument('uuid_example', ));
    }

    /**
     * Test case for reviewUrl
     *
     * Get url to review a document.
     *
     */
    public function testReviewUrl()
    {
        $path = "/documents/{uuid}/review";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("GET", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->documents()->reviewUrl('uuid_example', ));
    }

    /**
     * Test case for updateDocument
     *
     * Update a document.
     *
     */
    public function testUpdateDocument()
    {
        $path = "/documents/{uuid}";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("PUT", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->documents()->updateDocument('uuid_example', ["test" => true], ));
    }

    /**
     * Test case for uploadDocument
     *
     * Upload a document.
     *
     */
    public function testUploadDocument()
    {
        $path = "/documents";

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("POST", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->documents()->uploadDocument('name_example', "/path/to/file.txt", ));
    }

    /**
     * Test case for viewDocument
     *
     * View a document.
     *
     */
    public function testViewDocument()
    {
        $path = "/documents/{uuid}/view";
        $path = str_replace('{' . 'uuid' . '}', 'uuid_example', $path);

        $api = new Accounting("fake-token", options: [
            'handler' => HandlerStack::create(new TestHandler("GET", $path, null, "fake-token"))
        ]);
        $this->assertNotNull($api->documents()->viewDocument('uuid_example',));
    }
}
