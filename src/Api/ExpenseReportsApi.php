<?php
/**
 * ExpenseReportsApi
 * PHP version 8.1
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 */

/**
 * Accounting API
 *
 * The version of the OpenAPI document: 7.5.8
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Accounting\Api;

use InvalidArgumentException;
use Accounting\Accounting;
use Accounting\ApiException;

/**
 * ExpenseReportsApi Class Doc Comment
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 */
class ExpenseReportsApi
{
    /**
     * @var Accounting
     */
    protected Accounting $client;

    /**
     * @param Accounting $client
     */
    public function __construct(Accounting $client)
    {
        $this->client = $client;
    }



    /**
     * Operation addExpenseReport
     *
     * Add an expense report
     *
     * @param  array $addExpenseReportRequest addExpenseReportRequest (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/addExpenseReport
     */
    public function addExpenseReport(
        array $addExpenseReportRequest,
    ): null|string|array {

        // verify the required parameter 'addExpenseReportRequest' is set
        if ($addExpenseReportRequest === null || (is_array($addExpenseReportRequest) && count($addExpenseReportRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $addExpenseReportRequest when calling addExpenseReport'
            );
        }


        $resourcePath = '/expenses/expense-reports';
        $queryParams = [];
        $headers = [];
        $options = [];




        $options['json'] = $addExpenseReportRequest;



        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("POST", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation deleteExpenseReport
     *
     * Delete an expense report
     *
     * @param  string $uuid The expense report uuid (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/deleteExpenseReport
     */
    public function deleteExpenseReport(
        string $uuid,
    ): null|string|array {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling deleteExpenseReport'
            );
        }


        $resourcePath = '/expenses/expense-reports/{uuid}';
        $queryParams = [];
        $headers = [];
        $options = [];



        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                rawurlencode($uuid),
                $resourcePath
            );
        }




        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("DELETE", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation expenseReportOAuthLogin
     *
     * OAuth Login
     *
     * @param  string $method The OAuth Provider to use (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/expenseReportOAuthLogin
     */
    public function expenseReportOAuthLogin(
        string $method,
    ): null|string|array {

        // verify the required parameter 'method' is set
        if ($method === null || (is_array($method) && count($method) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $method when calling expenseReportOAuthLogin'
            );
        }


        $resourcePath = '/expenses/expense-reports/login/{method}';
        $queryParams = [];
        $headers = [];
        $options = [];



        if ($method !== null) {
            $resourcePath = str_replace(
                '{' . 'method' . '}',
                rawurlencode($method),
                $resourcePath
            );
        }




        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("GET", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation getExpenseReport
     *
     * Get an expense report
     *
     * @param  string $uuid The expense report uuid (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/getExpenseReport
     */
    public function getExpenseReport(
        string $uuid,
    ): null|string|array {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling getExpenseReport'
            );
        }


        $resourcePath = '/expenses/expense-reports/{uuid}';
        $queryParams = [];
        $headers = [];
        $options = [];



        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                rawurlencode($uuid),
                $resourcePath
            );
        }




        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("GET", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation getExpenseReportAccount
     *
     * Get the currently connected expense report user details
     *
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/getExpenseReportAccount
     */
    public function getExpenseReportAccount(
    ): null|string|array {



        $resourcePath = '/expenses/expense-reports/me';
        $queryParams = [];
        $headers = [];
        $options = [];







        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("GET", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation getExpenseReportUser
     *
     * Get an user details
     *
     * @param  string $uuid The expense report user uuid (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/getExpenseReportUser
     */
    public function getExpenseReportUser(
        string $uuid,
    ): null|string|array {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling getExpenseReportUser'
            );
        }


        $resourcePath = '/expenses/expense-reports/users/{uuid}';
        $queryParams = [];
        $headers = [];
        $options = [];



        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                rawurlencode($uuid),
                $resourcePath
            );
        }




        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("GET", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation listExpenseReports
     *
     * List company&#39;s expense reports.
     *
     * @param  string|null $fields A comma separated list of fields requested in the response (optional)
     * @param  string|null $page The response page (optional)
     * @param  string|null $perPage The number of items per page (optional)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/listExpenseReports
     */
    public function listExpenseReports(
        string|null $fields = null,
        string|null $page = null,
        string|null $perPage = null,
    ): null|string|array {



        $resourcePath = '/expenses/expense-reports';
        $queryParams = [];
        $headers = [];
        $options = [];

        if ($fields !== null) {
            $queryParams['fields'] = $fields;
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        if ($perPage !== null) {
            $queryParams['per_page'] = $perPage;
        }






        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("GET", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation sendExpenseReportLoginEmail
     *
     * Request login email
     *
     * @param  array $sendExpenseReportLoginEmailRequest sendExpenseReportLoginEmailRequest (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/sendExpenseReportLoginEmail
     */
    public function sendExpenseReportLoginEmail(
        array $sendExpenseReportLoginEmailRequest,
    ): null|string|array {

        // verify the required parameter 'sendExpenseReportLoginEmailRequest' is set
        if ($sendExpenseReportLoginEmailRequest === null || (is_array($sendExpenseReportLoginEmailRequest) && count($sendExpenseReportLoginEmailRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $sendExpenseReportLoginEmailRequest when calling sendExpenseReportLoginEmail'
            );
        }


        $resourcePath = '/expenses/expense-reports/login';
        $queryParams = [];
        $headers = [];
        $options = [];




        $options['json'] = $sendExpenseReportLoginEmailRequest;



        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("POST", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation updateExpenseReport
     *
     * Update an expense report
     *
     * @param  string $uuid The expense report uuid (required)
     * @param  array $addExpenseReportRequest addExpenseReportRequest (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/updateExpenseReport
     */
    public function updateExpenseReport(
        string $uuid,
        array $addExpenseReportRequest,
    ): null|string|array {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling updateExpenseReport'
            );
        }
        // verify the required parameter 'addExpenseReportRequest' is set
        if ($addExpenseReportRequest === null || (is_array($addExpenseReportRequest) && count($addExpenseReportRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $addExpenseReportRequest when calling updateExpenseReport'
            );
        }


        $resourcePath = '/expenses/expense-reports/{uuid}';
        $queryParams = [];
        $headers = [];
        $options = [];



        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                rawurlencode($uuid),
                $resourcePath
            );
        }

        $options['json'] = $addExpenseReportRequest;



        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("PUT", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation updateExpenseReportAccount
     *
     * Update the currently connected expense report user
     *
     * @param  array $updateExpenseReportAccountRequest updateExpenseReportAccountRequest (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/updateExpenseReportAccount
     */
    public function updateExpenseReportAccount(
        array $updateExpenseReportAccountRequest,
    ): null|string|array {

        // verify the required parameter 'updateExpenseReportAccountRequest' is set
        if ($updateExpenseReportAccountRequest === null || (is_array($updateExpenseReportAccountRequest) && count($updateExpenseReportAccountRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $updateExpenseReportAccountRequest when calling updateExpenseReportAccount'
            );
        }


        $resourcePath = '/expenses/expense-reports/me';
        $queryParams = [];
        $headers = [];
        $options = [];




        $options['json'] = $updateExpenseReportAccountRequest;



        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("PUT", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation updateExpenseReportSettings
     *
     * Retrieve company settings for expense reports
     *
     * @param  array $updateExpenseReportSettingsRequest updateExpenseReportSettingsRequest (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/updateExpenseReportSettings
     */
    public function updateExpenseReportSettings(
        array $updateExpenseReportSettingsRequest,
    ): null|string|array {

        // verify the required parameter 'updateExpenseReportSettingsRequest' is set
        if ($updateExpenseReportSettingsRequest === null || (is_array($updateExpenseReportSettingsRequest) && count($updateExpenseReportSettingsRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $updateExpenseReportSettingsRequest when calling updateExpenseReportSettings'
            );
        }


        $resourcePath = '/expenses/expense-reports/settings';
        $queryParams = [];
        $headers = [];
        $options = [];




        $options['json'] = $updateExpenseReportSettingsRequest;



        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("POST", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation verifyExpenseReportSettings
     *
     * Verify expense reports settings
     *
     * @param  array $verifyExpenseReportSettingsRequest verifyExpenseReportSettingsRequest (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/verifyExpenseReportSettings
     */
    public function verifyExpenseReportSettings(
        array $verifyExpenseReportSettingsRequest,
    ): null|string|array {

        // verify the required parameter 'verifyExpenseReportSettingsRequest' is set
        if ($verifyExpenseReportSettingsRequest === null || (is_array($verifyExpenseReportSettingsRequest) && count($verifyExpenseReportSettingsRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $verifyExpenseReportSettingsRequest when calling verifyExpenseReportSettings'
            );
        }


        $resourcePath = '/expenses/expense-reports/verify';
        $queryParams = [];
        $headers = [];
        $options = [];




        $options['json'] = $verifyExpenseReportSettingsRequest;



        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("POST", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

}
