<?php

/**
 * InvoicesApi
 * PHP version 8.1
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 */

/**
 * Accounting API
 *
 * The version of the OpenAPI document: 8.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Accounting\Api;

use InvalidArgumentException;
use Accounting\Accounting;
use Accounting\ApiException;

/**
 * InvoicesApi Class Doc Comment
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 */
class InvoicesApi
{
    /**
     * @var Accounting
     */
    protected Accounting $client;

    /**
     * @param Accounting $client
     */
    public function __construct(Accounting $client)
    {
        $this->client = $client;
    }



    /**
     * Operation addInvoice
     *
     * Add an invoice
     *
     * @param  array $addInvoiceRequest addInvoiceRequest (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/addInvoice
     */
    public function addInvoice(
        array $addInvoiceRequest,
    ): null|string|array {

        // verify the required parameter 'addInvoiceRequest' is set
        if ($addInvoiceRequest === null || (is_array($addInvoiceRequest) && count($addInvoiceRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $addInvoiceRequest when calling addInvoice'
            );
        }


        $resourcePath = '/incomes/invoices';
        $queryParams = [];
        $headers = [];
        $options = [];




        $options['json'] = $addInvoiceRequest;



        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("POST", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation addInvoicePayment
     *
     * Add an invoice payment
     *
     * @param  string $uuid The invoice uuid (required)
     * @param  array $addBillPaymentRequest addBillPaymentRequest (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/addInvoicePayment
     */
    public function addInvoicePayment(
        string $uuid,
        array $addBillPaymentRequest,
    ): null|string|array {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling addInvoicePayment'
            );
        }
        // verify the required parameter 'addBillPaymentRequest' is set
        if ($addBillPaymentRequest === null || (is_array($addBillPaymentRequest) && count($addBillPaymentRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $addBillPaymentRequest when calling addInvoicePayment'
            );
        }


        $resourcePath = '/incomes/invoices/{uuid}/payments';
        $queryParams = [];
        $headers = [];
        $options = [];



        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                rawurlencode($uuid),
                $resourcePath
            );
        }

        $options['json'] = $addBillPaymentRequest;



        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("POST", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation deleteInvoice
     *
     * Delete an invoice
     *
     * @param  string $uuid The invoice uuid (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/deleteInvoice
     */
    public function deleteInvoice(
        string $uuid,
    ): null|string|array {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling deleteInvoice'
            );
        }


        $resourcePath = '/incomes/invoices/{uuid}';
        $queryParams = [];
        $headers = [];
        $options = [];



        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                rawurlencode($uuid),
                $resourcePath
            );
        }




        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("DELETE", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation getInvoice
     *
     * Get an invoice
     *
     * @param  string $uuid The invoice uuid (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/getInvoice
     */
    public function getInvoice(
        string $uuid,
    ): null|string|array {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling getInvoice'
            );
        }


        $resourcePath = '/incomes/invoices/{uuid}';
        $queryParams = [];
        $headers = [];
        $options = [];



        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                rawurlencode($uuid),
                $resourcePath
            );
        }




        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("GET", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation getInvoiceDocument
     *
     * Get an invoice in PDF
     *
     * @param  string $uuid The invoice uuid (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/getInvoiceDocument
     */
    public function getInvoiceDocument(
        string $uuid,
    ): null|string|array {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling getInvoiceDocument'
            );
        }


        $resourcePath = '/incomes/invoices/{uuid}/document';
        $queryParams = [];
        $headers = [];
        $options = [];



        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                rawurlencode($uuid),
                $resourcePath
            );
        }




        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("GET", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation listInvoices
     *
     * List company&#39;s invoices
     *
     * @param  string|null $fields A comma separated list of fields requested in the response (optional)
     * @param  string|null $page The response page (optional)
     * @param  string|null $perPage The number of items per page (optional)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/listInvoices
     */
    public function listInvoices(
        string|null $fields = null,
        string|null $page = null,
        string|null $perPage = null,
    ): null|string|array {



        $resourcePath = '/incomes/invoices';
        $queryParams = [];
        $headers = [];
        $options = [];

        if ($fields !== null) {
            $queryParams['fields'] = $fields;
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        if ($perPage !== null) {
            $queryParams['per_page'] = $perPage;
        }






        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("GET", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation listUnpaidInvoices
     *
     * List company&#39;s unpaid invoices
     *
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/listUnpaidInvoices
     */
    public function listUnpaidInvoices(
    ): null|string|array {



        $resourcePath = '/incomes/invoices/unpaid';
        $queryParams = [];
        $headers = [];
        $options = [];







        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("GET", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation updateInvoice
     *
     * Update an invoice
     *
     * @param  string $uuid The invoice uuid (required)
     * @param  array $addInvoiceRequest addInvoiceRequest (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/updateInvoice
     */
    public function updateInvoice(
        string $uuid,
        array $addInvoiceRequest,
    ): null|string|array {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling updateInvoice'
            );
        }
        // verify the required parameter 'addInvoiceRequest' is set
        if ($addInvoiceRequest === null || (is_array($addInvoiceRequest) && count($addInvoiceRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $addInvoiceRequest when calling updateInvoice'
            );
        }


        $resourcePath = '/incomes/invoices/{uuid}';
        $queryParams = [];
        $headers = [];
        $options = [];



        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                rawurlencode($uuid),
                $resourcePath
            );
        }

        $options['json'] = $addInvoiceRequest;



        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("PUT", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation updateInvoicePayment
     *
     * Update an invoice payment
     *
     * @param  string $uuid The invoice uuid (required)
     * @param  string $payment The invoice payment uuid (required)
     * @param  array $addBillPaymentRequest addBillPaymentRequest (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/updateInvoicePayment
     */
    public function updateInvoicePayment(
        string $uuid,
        string $payment,
        array $addBillPaymentRequest,
    ): null|string|array {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling updateInvoicePayment'
            );
        }
        // verify the required parameter 'payment' is set
        if ($payment === null || (is_array($payment) && count($payment) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payment when calling updateInvoicePayment'
            );
        }
        // verify the required parameter 'addBillPaymentRequest' is set
        if ($addBillPaymentRequest === null || (is_array($addBillPaymentRequest) && count($addBillPaymentRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $addBillPaymentRequest when calling updateInvoicePayment'
            );
        }


        $resourcePath = '/incomes/invoices/{uuid}/payments/{payment}';
        $queryParams = [];
        $headers = [];
        $options = [];



        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                rawurlencode($uuid),
                $resourcePath
            );
        }
        if ($payment !== null) {
            $resourcePath = str_replace(
                '{' . 'payment' . '}',
                rawurlencode($payment),
                $resourcePath
            );
        }

        $options['json'] = $addBillPaymentRequest;



        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("PUT", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

}
