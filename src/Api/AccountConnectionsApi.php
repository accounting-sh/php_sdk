<?php

/**
 * AccountConnectionsApi
 * PHP version 8.1
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 */

/**
 * Accounting API
 *
 * The version of the OpenAPI document: 8.3.12
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Accounting\Api;

use InvalidArgumentException;
use Accounting\Accounting;
use Accounting\ApiException;

/**
 * AccountConnectionsApi Class Doc Comment
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 */
class AccountConnectionsApi
{
    /**
     * @var Accounting
     */
    protected Accounting $client;

    /**
     * @param Accounting $client
     */
    public function __construct(Accounting $client)
    {
        $this->client = $client;
    }



    /**
     * Operation deleteAccountConnection
     *
     * Delete an account&#39;s connection
     *
     * @param  string $uuid The account uuid (required)
     * @param  string $connection The connection uuid (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/deleteAccountConnection
     */
    public function deleteAccountConnection(
        string $uuid,
        string $connection,
    ): null|string|array {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling deleteAccountConnection'
            );
        }
        // verify the required parameter 'connection' is set
        if ($connection === null || (is_array($connection) && count($connection) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $connection when calling deleteAccountConnection'
            );
        }


        $resourcePath = '/accounts/{uuid}/connect/{connection}';
        $queryParams = [];
        $headers = [];
        $options = [];



        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                rawurlencode($uuid),
                $resourcePath
            );
        }
        if ($connection !== null) {
            $resourcePath = str_replace(
                '{' . 'connection' . '}',
                rawurlencode($connection),
                $resourcePath
            );
        }




        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("DELETE", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation listAccountConnections
     *
     * List account&#39;s connections
     *
     * @param  string $uuid The account uuid (required)
     * @param  string|null $fields A comma separated list of fields requested in the response (optional)
     * @param  string|null $page The response page (optional)
     * @param  string|null $perPage The number of items per page (optional)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/listAccountConnections
     */
    public function listAccountConnections(
        string $uuid,
        string|null $fields = null,
        string|null $page = null,
        string|null $perPage = null,
    ): null|string|array {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling listAccountConnections'
            );
        }


        $resourcePath = '/accounts/{uuid}/connect';
        $queryParams = [];
        $headers = [];
        $options = [];

        if ($fields !== null) {
            $queryParams['fields'] = $fields;
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        if ($perPage !== null) {
            $queryParams['per_page'] = $perPage;
        }


        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                rawurlencode($uuid),
                $resourcePath
            );
        }




        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("GET", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation listBanks
     *
     * List available bank connections
     *
     * @param  string $uuid The account uuid (required)
     * @param  string|null $country A two letter country code, if none are specified, the company&#39;s country is used (optional)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/listBanks
     */
    public function listBanks(
        string $uuid,
        string|null $country = null,
    ): null|string|array {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling listBanks'
            );
        }


        $resourcePath = '/accounts/{uuid}/connect/banks';
        $queryParams = [];
        $headers = [];
        $options = [];

        if ($country !== null) {
            $queryParams['country'] = $country;
        }


        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                rawurlencode($uuid),
                $resourcePath
            );
        }




        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("GET", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation listConnectableBankAccounts
     *
     * List connectable bank accounts
     *
     * @param  string $uuid The account uuid (required)
     * @param  string|null $connection The connection request UUID (optional)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/listConnectableBankAccounts
     */
    public function listConnectableBankAccounts(
        string $uuid,
        string|null $connection = null,
    ): null|string|array {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling listConnectableBankAccounts'
            );
        }


        $resourcePath = '/accounts/{uuid}/connect/accounts';
        $queryParams = [];
        $headers = [];
        $options = [];

        if ($connection !== null) {
            $queryParams['connection'] = $connection;
        }


        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                rawurlencode($uuid),
                $resourcePath
            );
        }




        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("GET", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation listConnectedAccountTransactions
     *
     * List the connected account&#39;s transactions
     *
     * @param  string $uuid The account uuid (required)
     * @param  string $connection The connection uuid (required)
     * @param  float|null $period The number of days to look back for transactions. Default is 7 days. (optional)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/listConnectedAccountTransactions
     */
    public function listConnectedAccountTransactions(
        string $uuid,
        string $connection,
        float|null $period = null,
    ): null|string|array {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling listConnectedAccountTransactions'
            );
        }
        // verify the required parameter 'connection' is set
        if ($connection === null || (is_array($connection) && count($connection) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $connection when calling listConnectedAccountTransactions'
            );
        }
        if ($period !== null && $period > 366) {
            throw new InvalidArgumentException('invalid value for "$period" when calling AccountConnectionsApi.listConnectedAccountTransactions, must be smaller than or equal to 366.');
        }
        if ($period !== null && $period < 1) {
            throw new InvalidArgumentException('invalid value for "$period" when calling AccountConnectionsApi.listConnectedAccountTransactions, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{uuid}/connect/{connection}';
        $queryParams = [];
        $headers = [];
        $options = [];

        if ($period !== null) {
            $queryParams['period'] = $period;
        }


        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                rawurlencode($uuid),
                $resourcePath
            );
        }
        if ($connection !== null) {
            $resourcePath = str_replace(
                '{' . 'connection' . '}',
                rawurlencode($connection),
                $resourcePath
            );
        }




        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("GET", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation requestBankConnection
     *
     * Request a new bank connection
     *
     * @param  string $uuid The account uuid (required)
     * @param  array $requestBankConnectionRequest requestBankConnectionRequest (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/requestBankConnection
     */
    public function requestBankConnection(
        string $uuid,
        array $requestBankConnectionRequest,
    ): null|string|array {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling requestBankConnection'
            );
        }
        // verify the required parameter 'requestBankConnectionRequest' is set
        if ($requestBankConnectionRequest === null || (is_array($requestBankConnectionRequest) && count($requestBankConnectionRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $requestBankConnectionRequest when calling requestBankConnection'
            );
        }


        $resourcePath = '/accounts/{uuid}/connect/request';
        $queryParams = [];
        $headers = [];
        $options = [];



        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                rawurlencode($uuid),
                $resourcePath
            );
        }

        $options['json'] = $requestBankConnectionRequest;



        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("POST", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

    /**
     * Operation selectBankAccount
     *
     * Select a bank account to connect
     *
     * @param  string $uuid The account uuid (required)
     * @param  array $selectBankAccountRequest selectBankAccountRequest (required)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/selectBankAccount
     */
    public function selectBankAccount(
        string $uuid,
        array $selectBankAccountRequest,
    ): null|string|array {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling selectBankAccount'
            );
        }
        // verify the required parameter 'selectBankAccountRequest' is set
        if ($selectBankAccountRequest === null || (is_array($selectBankAccountRequest) && count($selectBankAccountRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $selectBankAccountRequest when calling selectBankAccount'
            );
        }


        $resourcePath = '/accounts/{uuid}/connect/accounts';
        $queryParams = [];
        $headers = [];
        $options = [];



        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                rawurlencode($uuid),
                $resourcePath
            );
        }

        $options['json'] = $selectBankAccountRequest;



        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("POST", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

}
