<?php
/**
 * LogsApi
 * PHP version 8.1
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 */

/**
 * Accounting API
 *
 * The version of the OpenAPI document: 7.5.8
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Accounting\Api;

use InvalidArgumentException;
use Accounting\Accounting;
use Accounting\ApiException;

/**
 * LogsApi Class Doc Comment
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 */
class LogsApi
{
    /**
     * @var Accounting
     */
    protected Accounting $client;

    /**
     * @param Accounting $client
     */
    public function __construct(Accounting $client)
    {
        $this->client = $client;
    }



    /**
     * Operation logs
     *
     * List company&#39;s logs
     *
     * @param  string|null $fields A comma separated list of fields requested in the response (optional)
     * @param  string|null $page The response page (optional)
     * @param  string|null $perPage The number of items per page (optional)
     * @param  string|null $channel The channel to retrieve the logs from (optional)
     * @param  string|null $level The log level to retrieve (optional)
     * @param  string|null $resource Retrive logs linked to that resource (optional)
     * @param  string|null $before Retrive logs before the provided date (optional)
     * @param  string|null $after Retrive logs after the provided date (optional)
     * @param  string|null $format In which format to retrieve the logs, available: json or txt (optional)
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return null|string|array
     *
     * @link https://api.accounting.sh/swagger.html#operation/logs
     */
    public function logs(
        string|null $fields = null,
        string|null $page = null,
        string|null $perPage = null,
        string|null $channel = null,
        string|null $level = null,
        string|null $resource = null,
        string|null $before = null,
        string|null $after = null,
        string|null $format = null,
    ): null|string|array {



        $resourcePath = '/logs';
        $queryParams = [];
        $headers = [];
        $options = [];

        if ($fields !== null) {
            $queryParams['fields'] = $fields;
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        if ($perPage !== null) {
            $queryParams['per_page'] = $perPage;
        }
        if ($channel !== null) {
            $queryParams['channel'] = $channel;
        }
        if ($level !== null) {
            $queryParams['level'] = $level;
        }
        if ($resource !== null) {
            $queryParams['resource'] = $resource;
        }
        if ($before !== null) {
            $queryParams['before'] = $before;
        }
        if ($after !== null) {
            $queryParams['after'] = $after;
        }
        if ($format !== null) {
            $queryParams['format'] = $format;
        }






        if (!empty($headers)) {
            $options['headers'] = $headers;
        }
        $query = http_build_query($queryParams);
        return $this->client->request("GET", $resourcePath . ($query ? "?{$query}" : ''), $options);
    }

}
