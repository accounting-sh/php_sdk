<?php

/**
 * Accounting
 * PHP version 8.1
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 */

/**
 * Accounting API
 *
 * The version of the OpenAPI document: 8.3.12
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Accounting;

use Accounting\Api\AccountConnectionsApi;
use Accounting\Api\AccountingCodesApi;
use Accounting\Api\AccountsApi;
use Accounting\Api\AttachmentsApi;
use Accounting\Api\AuthApi;
use Accounting\Api\BillsApi;
use Accounting\Api\CategoriesApi;
use Accounting\Api\CompaniesApi;
use Accounting\Api\ContactsApi;
use Accounting\Api\CountriesApi;
use Accounting\Api\CredentialsApi;
use Accounting\Api\CurrencyApi;
use Accounting\Api\DocumentsApi;
use Accounting\Api\ExpenseReportsApi;
use Accounting\Api\ExportApi;
use Accounting\Api\InvoicesApi;
use Accounting\Api\LogsApi;
use Accounting\Api\NotificationApi;
use Accounting\Api\NotificationTypesApi;
use Accounting\Api\OAuthConfigApi;
use Accounting\Api\PaymentsApi;
use Accounting\Api\QuotesApi;
use Accounting\Api\ReceiptsApi;
use Accounting\Api\RevenuesApi;
use Accounting\Api\RossumApi;
use Accounting\Api\SearchApi;
use Accounting\Api\SettingsApi;
use Accounting\Api\StatisticsApi;
use Accounting\Api\TagsApi;
use Accounting\Api\TaxApi;
use Accounting\Api\TransactionsApi;
use Accounting\Api\TransfersApi;
use Accounting\Api\UsersApi;
use Accounting\Api\VATIDApi;
use Accounting\Api\WebhooksApi;
use GuzzleHttp\Client;

/**
 * Accounting Class
 *
 * @package  Accounting
 * @author   STAN-TAB CORP. LTD
 * @link     https://accounting.sh
 */
class Accounting
{
    /**
     * @var Client
     */
    private Client $client;

    /**
     * @var bool
     */
    private bool $throwErrors = true;

    /**
     * @return bool
     */
    public function isThrowErrors(): bool
    {
        return $this->throwErrors;
    }

    /**
     * @param bool $throwErrors
     * @return $this
     */
    public function setThrowErrors(bool $throwErrors): self
    {
        $this->throwErrors = $throwErrors;
        return $this;
    }

    /**
     * Perform an HTTP request again the API.
     *
     * @param string $method
     * @param string $path
     * @param array $options
     * @param string|null $comment
     * @throws ApiException
     * @return string|array|null
     */
    public function request(string $method, string $path, array $options = [], string $comment = null): null|string|array
    {

        if ($comment !== null) {
            if (!isset($options['headers'])) {
                $options['headers'] = [];
            }
            $options['headers']['X-Audit-Comment'] = $comment;
        }

        $response = $this->client->request($method, $path, $options);

        if ($response->getStatusCode() >= 200 && $response->getStatusCode() < 300) {
            switch ($response->getHeaderLine("Content-Type")) {
                case "application/json":
                    return json_decode($response->getBody(), true);
                default:
                    return $response->getBody()->getContents();
            }
        }

        if ($this->throwErrors) {
            throw new ApiException($response->getBody(), $response->getStatusCode(), $response->getHeaders(), $response->getBody()->getContents());
        }

        return null;
    }

    /**
     * @param string $token
     * @param string $url
     * @param array $options
     */
    public function __construct(string $token, string $url = "https://api.accounting.sh", array $options = [])
    {
        $this->client = new Client($options + [
            'http_errors' => false,
            'base_uri' => $url,
            "headers" => [
                "Authorization" => "Bearer {$token}",
                "User-Agent" => "AccountingSh/1.3.3/php",
            ]
        ]);
    }


    /**
     * @return AccountConnectionsApi
     */
    public function accountConnections(): AccountConnectionsApi
    {
        return new AccountConnectionsApi($this);
    }

    /**
     * @return AccountingCodesApi
     */
    public function accountingCodes(): AccountingCodesApi
    {
        return new AccountingCodesApi($this);
    }

    /**
     * @return AccountsApi
     */
    public function accounts(): AccountsApi
    {
        return new AccountsApi($this);
    }

    /**
     * @return AttachmentsApi
     */
    public function attachments(): AttachmentsApi
    {
        return new AttachmentsApi($this);
    }

    /**
     * @return AuthApi
     */
    public function auth(): AuthApi
    {
        return new AuthApi($this);
    }

    /**
     * @return BillsApi
     */
    public function bills(): BillsApi
    {
        return new BillsApi($this);
    }

    /**
     * @return CategoriesApi
     */
    public function categories(): CategoriesApi
    {
        return new CategoriesApi($this);
    }

    /**
     * @return CompaniesApi
     */
    public function companies(): CompaniesApi
    {
        return new CompaniesApi($this);
    }

    /**
     * @return ContactsApi
     */
    public function contacts(): ContactsApi
    {
        return new ContactsApi($this);
    }

    /**
     * @return CountriesApi
     */
    public function countries(): CountriesApi
    {
        return new CountriesApi($this);
    }

    /**
     * @return CredentialsApi
     */
    public function credentials(): CredentialsApi
    {
        return new CredentialsApi($this);
    }

    /**
     * @return CurrencyApi
     */
    public function currency(): CurrencyApi
    {
        return new CurrencyApi($this);
    }

    /**
     * @return DocumentsApi
     */
    public function documents(): DocumentsApi
    {
        return new DocumentsApi($this);
    }

    /**
     * @return ExpenseReportsApi
     */
    public function expenseReports(): ExpenseReportsApi
    {
        return new ExpenseReportsApi($this);
    }

    /**
     * @return ExportApi
     */
    public function export(): ExportApi
    {
        return new ExportApi($this);
    }

    /**
     * @return InvoicesApi
     */
    public function invoices(): InvoicesApi
    {
        return new InvoicesApi($this);
    }

    /**
     * @return LogsApi
     */
    public function logs(): LogsApi
    {
        return new LogsApi($this);
    }

    /**
     * @return NotificationApi
     */
    public function notification(): NotificationApi
    {
        return new NotificationApi($this);
    }

    /**
     * @return NotificationTypesApi
     */
    public function notificationTypes(): NotificationTypesApi
    {
        return new NotificationTypesApi($this);
    }

    /**
     * @return OAuthConfigApi
     */
    public function oAuthConfig(): OAuthConfigApi
    {
        return new OAuthConfigApi($this);
    }

    /**
     * @return PaymentsApi
     */
    public function payments(): PaymentsApi
    {
        return new PaymentsApi($this);
    }

    /**
     * @return QuotesApi
     */
    public function quotes(): QuotesApi
    {
        return new QuotesApi($this);
    }

    /**
     * @return ReceiptsApi
     */
    public function receipts(): ReceiptsApi
    {
        return new ReceiptsApi($this);
    }

    /**
     * @return RevenuesApi
     */
    public function revenues(): RevenuesApi
    {
        return new RevenuesApi($this);
    }

    /**
     * @return RossumApi
     */
    public function rossum(): RossumApi
    {
        return new RossumApi($this);
    }

    /**
     * @return SearchApi
     */
    public function search(): SearchApi
    {
        return new SearchApi($this);
    }

    /**
     * @return SettingsApi
     */
    public function settings(): SettingsApi
    {
        return new SettingsApi($this);
    }

    /**
     * @return StatisticsApi
     */
    public function statistics(): StatisticsApi
    {
        return new StatisticsApi($this);
    }

    /**
     * @return TagsApi
     */
    public function tags(): TagsApi
    {
        return new TagsApi($this);
    }

    /**
     * @return TaxApi
     */
    public function tax(): TaxApi
    {
        return new TaxApi($this);
    }

    /**
     * @return TransactionsApi
     */
    public function transactions(): TransactionsApi
    {
        return new TransactionsApi($this);
    }

    /**
     * @return TransfersApi
     */
    public function transfers(): TransfersApi
    {
        return new TransfersApi($this);
    }

    /**
     * @return UsersApi
     */
    public function users(): UsersApi
    {
        return new UsersApi($this);
    }

    /**
     * @return VATIDApi
     */
    public function vATID(): VATIDApi
    {
        return new VATIDApi($this);
    }

    /**
     * @return WebhooksApi
     */
    public function webhooks(): WebhooksApi
    {
        return new WebhooksApi($this);
    }

}
